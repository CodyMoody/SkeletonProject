Polynomial struct - stores mod base (0 if nothing specific) and array of coefficients, for now dense >> later sparse package

Sanity checks: get a polynomial, convert it to 2 mod bases, reconstruct to get initial coefficients


Arithmetic Package
reconstruct(int[] clues, int[] mods, int *output)
    // keep multiplying by primes until the result stops changing
add(pol1, pol2) // precondition: both polynomials have the same mod base
    sparse add joins two lists 
multiply(pol1, monomialPower) // pol * x^k
    output size = pol1.coef.length + monomialPower;
multiply(pol1, scalar)
    output size = pol1.coef.length;

// client methods
multiply(pol1, pol2)
    add all multiply(pol1, monomial of pol2)
subtract(pol1, pol2)
    pol2 = multiply(pol2, -1);
    output = add(pol1, pol2);
divide(pol1, pol2) // return remainder, once largest power of pol2 < pol1
